#+TITLE: $\mathrm{\LaTeX}$ in VS Code
#+REVEAL_TRANS: zoom
#+REVEAL_THEME: league


# 
#+OPTIONS: toc:nil num:nil


# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup
# #RREVEAL_TRANS: zoom

* Basics on VS Code
** Overview
   - VS Code is a free source-code editor made by Microsoft.
   - It was released in 2015.
   - According to [[https://insights.stackoverflow.com/survey/2019#development-environments-and-tools][Developer Survey Results 2019]], VS Code is the most popular
     development environment.
** Installation
   - Download here: https://code.visualstudio.com/
** Open files
#+ATTR_REVEAL: :frag (roll-in)
   - You can open a file by drag-and-drop.
   - *CMD + P* allows you to search files.
   - Note: *CMD* means Command Key for Mac and Control Key for Windows.
** Command Pallette
#+ATTR_REVEAL: :frag (roll-in)
   - *CMD + SHIFT + P* opens a command line showing all commands.
   - We will call this command line CP. 
   - Probably the most important keyboard shortcut!
   - Very helpful when you forgot keyboard shortcuts.
   - You can also discover many things using CP.
   - Quiz: How can you make the minimap disappear?
   - Hint: Search "minimap" at CP, and you will get the answer.
** How to change settings
#+ATTR_REVEAL: :frag (roll-in)
   1. CP $\rightarrow$ "Preferences: Open Settings (UI)" (or type *CMD+,*)
   2. Search "Editor: Font Size".
   3. Enter 14 (or any font size you want) in the box.
   4. Exercise: Disable the line number.
** How to change themes
#+ATTR_REVEAL: :frag (roll-in)
   - Search "theme" at CP, and choose "Preferences: Color Theme".
   - You can check out more themes from extensions.
** How to install extensions
#+ATTR_REVEAL: :frag (roll-in)
   1. Click the icon "Extensions" on the left.
   2. Search the extension you want to install.
   3. Click "Install".
*** Community Material Theme (extension)
#+ATTR_REVEAL: :frag (roll-in)
    1. Install "Community Material Theme" extension.
    2. Select "Community Material Theme Palenight (Higher Contrast)" from
       "Preferences: Color Theme" as we did above.
*** Code Spell Checker (extension)
    - Quick fix: *CMD + .*

* LaTeX Workshop (extension)
** Installation
   - First you need to install LaTeX Workshop using "Extensions" icon as before.
** Basic commands
#+ATTR_REVEAL: :frag (roll-in)
   - *TeX Compile* 
      - To build a pdf type *CMD + OPTION + B*. 
      - If you forgot this, search "latex build" at CP.
      - Alternatively, you can simply save the tex file.
      - What's the shortcut for "Save"? (Hint: CP)
   - *View PDF*
      - To view a pdf, type *CMD + OPTION + V*. 
      - If you forgot this, search "latex pdf" at CP.
   - *Inverse Search* (find source code from pdf)
      - *CMD + left click on the pdf* 
   - *SyncTeX from cursor* (Forward Search)
      - *CMD + OPTION + J*
*** Exercises
    1. Find the shortcuts for "Copy" and "Paste".
    2. Discover what "Copy Line Up" and "Copy Line Down" mean.
    3. Find the shortcut for "Find".
    4. Find a way to comment a line.
    5. Experiment with your finding in 4 by using its shortcut after selecting a
       region.
** Move between sections or labels
#+ATTR_REVEAL: :frag (roll-in)
   - Click the icon $\mathrm{\TeX}$ on the left.
   - This will show the sidebar with sections and labels.
   - By clicking a section here you can move to that section in your tex file.
   - You can toggle the sidebar with *CMD + B*. If you forgot this, you know what
     to do.
** Some interesting features
#+ATTR_REVEAL: :frag (roll-in)
   - Auto Completion: Try to type ~\begin{theorem}~
   - Collapsing environments
     - Click the down arrow appearing at the left of an environment.
   - Preview
     - Place your mouse pointer at an equation.
   - Latex Snippet Panel 
     - CP $\rightarrow$ "Latex Workshop: Show Snippet Panel"
   - Typing "\ref{" shows all labels.
     - By clicking the arrow at the right corner, you can see the content of the
       label.
** Snippets
#+ATTR_REVEAL: :frag (roll-in)
   - A /snippet/ means a block of re-usable code, somewhat similar to macro.
   - If you type the "prefix" of a snippet and press ~TAB~ or ~ENTER~, then it
     will insert the "body" of the snippet.
   - @a: ~\alpha~
   - @(: ~\left( \right)~
   - @/: ~\frac{}{}~
   - bit: ~\begin{itemize} ... \end{itemize}~
   - fem: ~\emph{}~
   - mbf: ~\mathbf{}~
   - Typing a letter and ~CTRL+SPC~ will show all snippets whose prefix contains
     that letter.
** More Snippets
   - See the links below for more snippets.
     https://github.com/James-Yu/LaTeX-Workshop/wiki/Snippets#Handy-mathematical-snippets

     https://cheatography.com/jcwinkler/cheat-sheets/latex-workshop-visual-studio-code/#downloads
** Add Keyboard shortcuts
#+ATTR_REVEAL: :frag (roll-in)
   1. CP $\rightarrow$ Preferences: Open Keyboard Shortcuts
   2. Search "Latex Workshop: Select the current environment content."
   3. Double click this line and enter your desired key combination (e.g. *CMD+'*).
*** Exercise
    - Setup a keyboard shortcut for "Latex Workshop: Select the current section".
** Finding errors
   1. If there are some errors in your tex file, VS Code will show a message box
     when you build LaTeX.
   2. Click "Open compiler log" in the message box.
   3. Click "Problems" in the small window at the bottom. You can make it bigger
      by dragging its top.
   4. Clicking a line in this window will send you to the precise location in
      your tex file where the error occurs.

* User Snippets
** latex.json
#+ATTR_REVEAL: :frag (roll-in)
   - To write user snippets we need to open the "latex.json" file.
   - CP $\rightarrow$ Preferences: Configure User Snippets
   - Find "latex (latex)" or "latex.json (latex)".
   - It will open the file latex.json.
** Write user snippets (without arguments)
#+ATTR_REVEAL: :frag (roll-in)
   - In the latex.json file everything is enclosed by a pair of curly braces ~{...}~.
   - You can write your own snippets inside this braces.
   - Each snippet has the following structure.
     :  	 "snippet name": {
     :      	 "prefix": "snippet key",
     :         "body": "snippet body"
     :  	 }
*** Example
#+ATTR_REVEAL: :frag (roll-in)
    - Consider the following snippet.
     :    "vandermonde determinant": {
     :        "prefix": "vdm", 
     :        "body": "\\prod_{1\\le i<j\\le n} (x_i - x_j)" 
     :    }
    - This  snippet will insert the following when you press TAP after
     typing vdm:
      : \prod_{1\le i<j\le n} (x_i - x_j)
    - Notice that we must write two slashes ~\\~ to insert a single slash ~\~.
*** Example
#+ATTR_REVEAL: :frag (roll-in)
   - If you have more than one snippets, you must put a comma ~,~ after each
     snippet. 
   - So, for example, your latex.jason file should look something like this
     (notice the outermost pair of curly braces):
     : {
     :    "vandermonde determinant": {
     :        "prefix": "vdm", 
     :        "body": "\\prod_{1\\le i<j\\le n} (x_i - x_j)" 
     :    },
     :    "vandermonde determinant2": {
     :        "prefix": "vdm2", 
     :        "body": "\\prod_{1\\le i<j\\le n} (y_i - y_j)" 
     :    }
     : }
** Write user snippets (with arguments)
#+ATTR_REVEAL: :frag (roll-in)
   - Using arguments you can create more flexible snippets.
   - Arguments are of this form ~$1~, ~$2~, etc., and ~$0~.
   - ~$1~, ~$2~, etc. mean the first argument and the second argument etc.
   - You will be asked to type these variables when you use the snippet.
   - ~$0~ means the final location of the cursor when all the arguments have
     been typed.
*** Example
#+ATTR_REVEAL: :frag (roll-in)
   - Consider the following snippet.
     : 	"vandermonde det": {
     : 		"prefix": "vdm",
     : 		"body": "\\prod_{1\\le i<j\\le $1} ($2_i - $2_j)"
     : 	}
   - If you use this snippet, it will ask you to fill ~$1~ and then ~$2~. You
     can move to the next argument by pressing ~TAB~.
   - If you type ~m~ ~TAB~ ~z~ ~TAB~, then the snippet will insert this:
     :    \prod_{1\le i<j\le m} (z_i - z_j)
   - Note that you need to type ~$2~ only once and it will be inserted twice as
     designed.
*** Example (default arguments)
   - You can also set default arguments using ~${n:default}~.
   - For example, the following snippet has default values ~n~ and ~x~ for the
     arguments ~$1~ and ~$2~ respectively.
     : 	"vandermonde det": {
     : 		"prefix": "vdm",
     : 		"body": "\\prod_{1\\le i<j\\le ${1:n} (${2:x}_i - $2_j)"
     : 	}

** Exercises
   1. Write a snippet that inserts the following and place the cursor in the
      middle.
      : \langle  \rangle
   2. Write a snippet that inserts the following and place the cursor in the
      middle. (Hint: a new line can be created using ~\n~.)
      : \[
      :
      : \]
   3. Write a snippet that inserts the following, where ~x~ and ~n~ are
      given as default but can be changed to anything.
      : (x_1,x_2,\dots,x_n) 
** More Exercises
   1. LaTeX Workshop has the snippet ~BCAS~ that inserts the following.
      : \begin{cases}
      :
      : \end{cases}
      Write your own snippet with the same prefix ~BCAS~ that inserts 
      : \begin{cases}
      :   A  &  \mbox{if $B$},\\
      :   C  &  \mbox{D}.
      : \end{cases}
      and asks you to fill A, B, C, D in this order, where D is set to be
      ~otherwise~ by default, and locate the cursor below the line containing
      ~\end{cases}~.
   2. See what happens if you type ~BCAS~.

* BibTeX
** Overview
#+ATTR_REVEAL: :frag (roll-in)
   - BibTeX is a program used for generating references.
   - First you need a BibTeX file.
   - Then you need to have the following two lines in you tex file:
     :   \bibliographystyle{STYLE}
     :   \bibliography{BIBFILE}
   - ~STYLE~ can be ~abbrv~, ~alpha~, ~plain~, etc.
   - ~BIBFILE~ is the location of your BibTeX, for example, something like this:
     : /Users/jangsookim/bibtex/ref.bib
** Entries in BibTeX file
#+ATTR_REVEAL: :frag (roll-in)
   - A BibTeX file has entries like this:
     : @article{Bressoud1979,
     :   title={A generalization of the {R}ogers-{R}amanujan
     :          identities for all moduli},
     :   author={Bressoud, David M},
     :   journal={Journal of Combinatorial Theory, Series A},
     :   volume={27},
     :   number={1},
     :   pages={64--68},
     :   year={1979},
     : }
   - To cite this paper you can type ~\cite{Bressoud1979}~ in your tex file.
   - Note that in the title you must use ~{ }~ for capital letters as above.

** BibTeX entries from Google Scholar
#+ATTR_REVEAL: :frag (roll-in)
     1. Search the paper you want to cite in Google Scholar.
        https://scholar.google.com/
     2. Google Scholar will show a thumbnail for that paper.
     3. Click ~"~ at the bottom of the thumbnail.
     4. Click the BibTeX icon at the bottom.
     5. You can copy the text into you BibTeX file.

** JabRef
#+ATTR_REVEAL: :frag (roll-in)
   - JabRef is a free BibTex Manager.
   - Download here: http://www.jabref.org/
   - JabRef is useful when your BibTeX file has many entries.
   - Using JabRef you can add a new entry directly from "Web search" at the
     bottom left corner.
   - I couldn't find any BibTeX managers in VS Code extensions. Let me know if
     you found one.
** bbl file
#+ATTR_REVEAL: :frag (roll-in)
   - If you compile bibtex, it will generate a bbl file ~TEXFILENAME.bbl~, where
     ~TEXFILENAME~ is your tex filename.
   - This file contains all bibitems you need in your tex file.
   - You can copy everything in this file and paste it at the end of your tex file.
   - After this you no longer need your BibTeX file.
   - This may be helpful if you want to have a single stand-alone tex file.

* Code Ace Jumper (extension)
** Overview
   - Code Ace Jumper is an extension that allows you to jump around your file.
   - How to use:
     1. Execute "AceJump: Jump".
     2. Type a letter, say ~d~, and it will assign a letter (or two or more) to
        each word starting with ~d~.
     3. Type the letter assigned to the word that you want to move.
   - There are three more commands like this.
   - First, you need to assign keyboard shortcuts for these commands.
** Add Keyboard shortcuts
#+ATTR_REVEAL: :frag (roll-in)
   1. CP $\rightarrow$ Preferences: Open Keyboard Shortcuts
   2. Search "ace jump".
   3. You can assign a keyboard shortcut by double clicking each command. For
      example, 
      - AceJump: Jump $\rightarrow$ *CMD+J J*
      - AceJump: Line $\rightarrow$ *CMD+J L*
      - AceJump: MultiChar $\rightarrow$ *CMD+J M*
      - AceJump: Selection $\rightarrow$ *CMD+J S*
** Change some options
*** Redefine "words"
#+ATTR_REVEAL: :frag (roll-in)
    1. We want to make the ~f~ in ~\frac~ or in ~$f$~ as the start of a word.
    2. CP $\rightarrow$ Preferences: Open Settings (UI). (or ~CMD+,~ for a shortcut)
    3. Search "Ace Jump > Finder: Pattern".
    4. Add ~\\$~ at the end, just before ~]~ in 
       : [,-.{_("'<\[ ]
        so that it looks like this:
       : [,-.{_("'<\[ \\$]
*** Change the background color
    - Enter "yellow" in "Ace Jump > Placeholder: Background Color".
*** Change the scroll mode
    - Set "none" in "Ace Jump > Scroll:Mode".

* Vim (extension)
** Overview
#+ATTR_REVEAL: :frag (roll-in)
   - Vim is a modal editor meaning that it has several modes.
     - Normal mode: used for editor commands
     - Insert mode: used for inserting text
     - Command-line mode: used for doing some commands
   - Vim Extension allows us to use Vim commands inside VS Code.
   - Vim graphical cheat sheet\\
     https://eggplant.pro/blog/wp-content/uploads/2016/12/vi-vim-tutorial.pdf
** Installation 
#+ATTR_REVEAL: :frag (roll-in)
   - First you need to install Vim using "Extensions" icon as before.
   - Once you have Vim installed, you can use Vim commands immediately.
   - You can disable Vim as follows.
     1. Click Vim in "Extensions".
     2. Click "Disable".
** Changing modes
| key | command                            |
|-----+------------------------------------|
| i   | Change to Insert Mode at cursor    |
| a   | Change to Insert Mode after cursor |
| ESC | Change to Normal Mode              |
| :   | Change to Command-line Mode        |
** Movements (Normal Mode)
| key        | command               |
|------------+-----------------------|
| h, j, k, l | left, down, up, right |
| w          | next word             |
| b          | previous word         |
| CTRL+f     | page forward          |
| CTRL+b     | page backward         |
#+ATTR_REVEAL: :frag (roll-in)
    - Typing ~n~ will repeat the following command n times.
    - For example, ~4w~ is equivalent to ~wwww~.
    - You can still use the arrow keys, but it's not recommended.
** Editing (Normal Mode)
| key | command                     |
|-----+-----------------------------|
| y   | yank something              |
| d   | delete something            |
| p   | paste after                 |
| P   | paste before                |
| x   | delete letter at cursor |
#+ATTR_REVEAL: :frag (roll-in)
    - Deleted text is always copied in clipboard.
    - You can make a sentence using these.
    - ~yy~ : yank line
    - ~dd~ : delete line
    - ~dw~ : delete word

** Visual Mode
| key | command                           |
|-----+-----------------------------------|
| v   | Change to Visual Mode             |
| V   | Change to Visual Mode (line-wise) |
#+ATTR_REVEAL: :frag (roll-in)
    - Visual Mode highlights a region.
    - In Visual Mode, ~y~ yanks the content in the selected region.
    - In Visual Mode, ~d~ deletes the content in the selected region.


** Finding a letter (Normal Mode)
| key       | command                                     |
|-----------+---------------------------------------------|
| f $\star$ | Move cursor to $\star$ in current line.     |
| t $\star$ | Move cursor before $\star$ in current line. |
| F $\star$ | Similar to "f" but backward.                |
| T $\star$ | Similar to "t" but backward.                |
| ;         | Repeat the previous finding command.        |
    - $\star$ is a letter you need to type after ~f~, ~t~, etc.
** Finding a word (Normal Mode)
| key | command                 |
|-----+-------------------------|
| ~/~ | Find a word.            |
| n   | Find the next word.     |
| N   | Find the previous word. |
#+ATTR_REVEAL: :frag (roll-in)
    - ~/abc ENTER~ will move the cursor after the first occurrence of the word
      ~abc~.
    - ~n~ will find the next occurrence of the word.
    - ~N~ will find the previous occurrence of the word.
** Other useful commands (Normal Mode)
| key    | command                 |
|--------+-------------------------|
| u      | Undo                    |
| CTRL+r | Redo                    |
| 0      | beginning of line       |
| $      | end of line             |
| gg     | beginning of the file   |
| G      | end of the file         |
| zt     | scroll cursor to top    |
| zb     | scroll cursor to bottom |
| zz     | scroll cursor to center |

** Useful combos
#+ATTR_REVEAL: :frag (roll-in)
   - ~yf$~: If you are at the beginning of an inline math mode ~$~, then ~yf$~
      can copy the whole math expression.
   - ~yt$~: Similar, but ~$~ is excluded.
   - ~dt.~: This will delete up to the period.
   - ~xp~: This will swap two letters.
   - Selecting a whole section: (cursor at \section{ABC})
      : V / \\section Enter k
   - Selecting a whole file: ~gg V G~

** Registers
#+ATTR_REVEAL: :frag (roll-in)
   - You can store something in a register.
   - The easiest way is as follows:
     1. Select a region that you want to register.
     2. Type ~ay~, where ~a~ can be any letter.
     3. This will register the content of the region at register ~a~.
     4. Type ~ap~ or ~aP~ to insert the content at register ~a~.
   - To view the registers type the following.\\
     ~:reg ENTER~
** Mark positions
#+ATTR_REVEAL: :frag (roll-in)
   - You can mark the current position for future use.
     1. ~ma~ marks the current position by ~a~, where ~a~ can be any letter.
     2. Typing ~`a~ send you back to the position marked by ~a~.
   - It's helpful to mark the position where macros are defined.
** Dot: Repeat the previous command.
#+ATTR_REVEAL: :frag (roll-in)
   - ~.~ repeats the previously performed command.
   - For example, ~dd~ deletes the line at cursor. Pressing ~.~ will delete
     another line.
   - When used carefully, this dot command can be very effective.
   - More complicated tasks can be done by macros.

** Macros
#+ATTR_REVEAL: :frag (roll-in)
   - ~qa~ followed by ~q~ records all your commands performed between them at
     ~a~.
   - ~@a~ repeats the commands recorded at ~a~.
   - ~@@~ runs the previously performed macro.
   - In order to write more complicated macros, you need to know more Vim
     commands, for example, 
     | key | command           |
     |-----+-------------------|
     | c   | Change something  |
     | e   | end of word       |
     | 0   | beginning of line |
     | $   | end of line       |



*** Example
#+ATTR_REVEAL: :frag (roll-in)
    - We want to insert ~&~ before each ~=~ below.
      : \begin{align*}
      :   a = b,\\
      :   a+a = b+b,\\
      :   a+a+a = b+b+b,\\
      :   a+a+a+a = b+b+b+b.
      : \end{align*}
    - We can do this using a macro like this.
      1. Locate your cursor at the beginning of line 2.
      2. (In Normal Mode) Press ~qa~.
      3. Type ~f = i & ESC k 0~ and ~q~.
      4. Type ~@a~ and then ~@@~ twice.
*** Exercises
    - Replace each pair ~[ ]~ by ~( )~ using a macro (you may use one macro many
      times).
      : \begin{align*}
      :   a[x] = b[x],\\
      :   a[x]+a[y] = b[x]+b[y],\\
      :   a[x]+a[y]+a[z] = b[x]+b[y]+b[z],\\
      :   a[x]+a[y]+a[z]+a[w] = b[x]+b[y]+b[z]+b[w].
      : \end{align*}

* More tips and tricks
** Hold a key to repeat it.
   https://stackoverflow.com/questions/39972335/how-do-i-press-and-hold-a-key-and-have-it-repeat-in-vscode

